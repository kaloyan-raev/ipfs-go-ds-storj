#!/bin/sh
set -e
user=ipfs
repo="$IPFS_PATH"

if [ `id -u` -eq 0 ]; then
  echo "Changing user to $user"
  # ensure folder is writable
  su-exec "$user" test -w "$repo" || chown -R -- "$user" "$repo"
  # restart script with new privileges
  exec su-exec "$user" "$0" "$@"
fi

# 2nd invocation with regular user
ipfs version

if [ -e "$repo/config" ]; then
  echo "Found IPFS fs-repo at $repo"
else
  case "$IPFS_PROFILE" in
    "") INIT_ARGS="" ;;
    *) INIT_ARGS="--profile=$IPFS_PROFILE" ;;
  esac
  ipfs init --empty-repo $INIT_ARGS

  # Set the node's peer ID, if a predefined one is provided
  if [ ! -z $IPFS_IDENTITY_PEER_ID ]; then
    ipfs config Identity.PeerID $IPFS_IDENTITY_PEER_ID
  fi

  # Set the private key that matches the peer ID, if provided above
  if [ ! -z $IPFS_IDENTITY_PRIVATE_KEY ]; then
    # We use sed here because `ipfs config` does not allow changing the PrivKey.
    sed -i "s/\(\"PrivKey\": \).*/\1\"$IPFS_IDENTITY_PRIVATE_KEY\"/" $repo/config
  fi

  # HTTP API port config
  if [ -z $IPFS_API_PORT ]; then IPFS_API_PORT=5001; fi
  ipfs config Addresses.API /ip4/0.0.0.0/tcp/$IPFS_API_PORT

  # Gateway port config
  if [ -z $IPFS_GATEWAY_PORT ]; then IPFS_GATEWAY_PORT=8080; fi
  ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/$IPFS_GATEWAY_PORT

  # Open or restricted gateway config
  if [ -z $IPFS_GATEWAY_NO_FETCH ]; then IPFS_GATEWAY_NO_FETCH=false; fi
  ipfs config --bool Gateway.NoFetch $IPFS_GATEWAY_NO_FETCH

  # Gateway domain and subdomain usage config
  if [ -z $IPFS_GATEWAY_USE_SUBDOMAINS ]; then IPFS_GATEWAY_USE_SUBDOMAINS=false; fi
  if [ ! -z $IPFS_GATEWAY_DOMAIN ]; then
    ipfs config --json Gateway.PublicGateways "{\"$IPFS_GATEWAY_DOMAIN\":{\"Paths\": [\"/ipfs\"],\"UseSubdomains\": $IPFS_GATEWAY_USE_SUBDOMAINS}}"
  fi

  if [ ! -z $IPFS_BLOOM_FILTER_SIZE ]; then
    ipfs config --json Datastore.BloomFilterSize $IPFS_BLOOM_FILTER_SIZE
  fi

  # Storj datastore config
  if [ ! -z $STORJ_PACK_INTERVAL ]; then CFG_PACK_INTERVAL=",\"packInterval\": \"$STORJ_PACK_INTERVAL\""; fi
  if [ -z $STORJ_UPDATE_BLOOM_FILTER ]; then STORJ_UPDATE_BLOOM_FILTER=false; fi
  if [ ! -z $STORJ_NODE_CONNECTION_POOL_CAPACITY ]; then CFG_NODE_CONNECTION_POOL_CAPACITY=",\"nodeConnectionPoolCapacity\": \"$STORJ_NODE_CONNECTION_POOL_CAPACITY\""; fi
  if [ ! -z $STORJ_NODE_CONNECTION_POOL_KEY_CAPACITY ]; then CFG_NODE_CONNECTION_POOL_KEY_CAPACITY=",\"nodeConnectionPoolKeyCapacity\": \"$STORJ_NODE_CONNECTION_POOL_KEY_CAPACITY\""; fi
  if [ ! -z $STORJ_NODE_CONNECTION_POOL_IDLE_EXPIRATION ]; then CFG_NODE_CONNECTION_POOL_IDLE_EXPIRATION=",\"nodeConnectionPoolIdleExpiration\": \"$STORJ_NODE_CONNECTION_POOL_IDLE_EXPIRATION\""; fi
  if [ ! -z $STORJ_SATELLITE_CONNECTION_POOL_CAPACITY ]; then CFG_SATELLITE_CONNECTION_POOL_CAPACITY=",\"satelliteConnectionPoolCapacity\": \"$STORJ_SATELLITE_CONNECTION_POOL_CAPACITY\""; fi
  if [ ! -z $STORJ_SATELLITE_CONNECTION_POOL_KEY_CAPACITY ]; then CFG_SATELLITE_CONNECTION_POOL_KEY_CAPACITY=",\"satelliteConnectionPoolKeyCapacity\": \"$STORJ_SATELLITE_CONNECTION_POOL_KEY_CAPACITY\""; fi
  if [ ! -z $STORJ_SATELLITE_CONNECTION_POOL_IDLE_EXPIRATION ]; then CFG_SATELLITE_CONNECTION_POOL_IDLE_EXPIRATION=",\"satelliteConnectionPoolIdleExpiration\": \"$STORJ_SATELLITE_CONNECTION_POOL_IDLE_EXPIRATION\""; fi
  ipfs config --json Datastore.Spec "{\"mounts\": [{\"child\": {\"type\": \"storjds\",\"dbURI\": \"$STORJ_DATABASE_URL\",\"bucket\": \"$STORJ_BUCKET\",\"accessGrant\": \"$STORJ_ACCESS\"$CFG_PACK_INTERVAL,\"debugAddr\": \"$STORJ_DEBUG_ADDR\",\"updateBloomFilter\": \"$STORJ_UPDATE_BLOOM_FILTER\"$CFG_NODE_CONNECTION_POOL_CAPACITY$CFG_NODE_CONNECTION_POOL_KEY_CAPACITY$CFG_NODE_CONNECTION_POOL_IDLE_EXPIRATION$CFG_SATELLITE_CONNECTION_POOL_CAPACITY$CFG_SATELLITE_CONNECTION_POOL_KEY_CAPACITY$CFG_SATELLITE_CONNECTION_POOL_IDLE_EXPIRATION},\"mountpoint\": \"/\",\"prefix\": \"storj.datastore\",\"type\": \"measure\"},{\"child\": {\"compression\": \"none\",\"path\": \"providers\",\"type\": \"levelds\"},\"mountpoint\": \"/providers\",\"prefix\": \"leveldb.datastore\",\"type\": \"measure\"}],\"type\": \"mount\"}"
  echo -e "{\"mounts\":[{\"mountpoint\":\"/providers\",\"path\":\"providers\",\"type\":\"levelds\"},{\"bucket\":\"$STORJ_BUCKET\",\"mountpoint\":\"/\"}],\"type\":\"mount\"}" > $repo/datastore_spec

  # Delegated Routing config
  if [ ! -z $IPFS_INDEX_PROVIDER_URL ]; then
    ipfs config --json Routing "{\"Methods\":{\"find-peers\":{\"RouterName\":\"WanDHT\"},\"find-providers\":{\"RouterName\":\"ParallelHelper\"},\"get-ipns\":{\"RouterName\":\"WanDHT\"},\"provide\":{\"RouterName\":\"ParallelHelper\"},\"put-ipns\":{\"RouterName\":\"WanDHT\"}},\"Routers\":{\"CidContact\":{\"Parameters\":{\"Endpoint\":\"$IPFS_INDEX_PROVIDER_URL\"},\"Type\":\"http\"},\"ParallelHelper\":{\"Parameters\":{\"Routers\":[{\"IgnoreErrors\":true,\"RouterName\":\"CidContact\",\"Timeout\":\"30m\"},{\"IgnoreErrors\":true,\"RouterName\":\"WanDHT\",\"Timeout\":\"30m\"}]},\"Type\":\"parallel\"},\"WanDHT\":{\"Parameters\":{\"AcceleratedDHTClient\":true,\"Mode\":\"dhtserver\",\"PublicIPNetwork\":true},\"Type\":\"dht\"}},\"Type\":\"custom\"}"
    ipfs config --bool Experimental.AcceleratedDHTClient true
  fi

  # Set up the swarm key, if provided

  SWARM_KEY_FILE="$repo/swarm.key"
  SWARM_KEY_PERM=0400

  # Create a swarm key from a given environment variable
  if [ ! -z "$IPFS_SWARM_KEY" ] ; then
    echo "Copying swarm key from variable..."
    echo -e "$IPFS_SWARM_KEY" > "$SWARM_KEY_FILE" || exit 1
    chmod $SWARM_KEY_PERM "$SWARM_KEY_FILE"
  fi

  # Unset the swarm key variable
  unset IPFS_SWARM_KEY

  # Check during initialization if a swarm key was provided and
  # copy it to the ipfs directory with the right permissions
  # WARNING: This will replace the swarm key if it exists
  if [ ! -z "$IPFS_SWARM_KEY_FILE" ] ; then
    echo "Copying swarm key from file..."
    install -m $SWARM_KEY_PERM "$IPFS_SWARM_KEY_FILE" "$SWARM_KEY_FILE" || exit 1
  fi

  # Unset the swarm key file variable
  unset IPFS_SWARM_KEY_FILE

  # Check and set extra addresses
  if [ ! -z "$IPFS_ADDRESSES_SWARM" ]; then
    ipfs config --json Addresses.Swarm "$IPFS_ADDRESSES_SWARM"
  fi

  # Check and set extra peers
  if [ ! -z "$IPFS_PEERING_PEERS" ]; then
    ipfs config --json Peering.Peers "$IPFS_PEERING_PEERS"
  fi
fi

# Print config for debug purposes
if [ -z $IPFS_SHOW_CONFIG ]; then IPFS_SHOW_CONFIG=false; fi
if [[ $IPFS_SHOW_CONFIG == "true" ]] ; then
  ipfs config show
fi

exec ipfs "$@"
